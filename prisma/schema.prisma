generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model actor_movie {
  id       Int    @id @default(autoincrement())
  movie_id Int
  actor_id Int
  movies   movies @relation(fields: [movie_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "actor_movie_fk0")
  actors   actors @relation(fields: [actor_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "actor_movie_fk1")
}

model actors {
  id          Int           @id @default(autoincrement())
  name        String
  actor_movie actor_movie[]
}

model directors {
  id     Int      @id @default(autoincrement())
  name   String
  movies movies[]
}

model genres {
  id          Int           @id @default(autoincrement())
  name        String
  movie_genre movie_genre[]
}

model movie_genre {
  id       Int    @id @default(autoincrement())
  movie_id Int
  genre_id Int
  movies   movies @relation(fields: [movie_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "movie_genre_fk0")
  genres   genres @relation(fields: [genre_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "movie_genre_fk1")
}

model movies {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  year        Int
  poster      String
  director    Int
  actor_movie actor_movie[]
  movie_genre movie_genre[]
  directors   directors     @relation(fields: [director], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "movies_fk0")
  watched     watched[]
  wishlist    wishlist[]
}

model sessions {
  id         Int      @id @default(autoincrement())
  user_id    Int
  token      String   @unique
  created_at DateTime @default(now()) @db.Timestamp(6)
  users      users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sessions_fk0")
}

model users {
  id         Int        @id @default(autoincrement())
  name       String
  email      String     @unique
  password   String
  created_at DateTime   @default(now()) @db.Timestamp(6)
  sessions   sessions[]
  watched    watched[]
  wishlist   wishlist[]
}

model watched {
  id         Int      @id @default(autoincrement())
  user_id    Int
  movie_id   Int
  created_at DateTime @default(now()) @db.Timestamp(6)
  users      users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "watched_fk0")
  movies     movies   @relation(fields: [movie_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "watched_fk1")
}

model wishlist {
  id         Int      @id @default(autoincrement())
  user_id    Int
  movie_id   Int
  rate       Int
  watched    Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamp(6)
  users      users    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "wishlist_fk0")
  movies     movies   @relation(fields: [movie_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "wishlist_fk1")
}
